
import numpy
​
arr = numpy.array([1, 2, 3, 4, 5])
​
print(arr)
[1 2 3 4 5]

import numpy as np
​
print(np.__version__)
​
1.19.4

import numpy as np
​
arr = np.array([1, 2, 3, 4, 5])
​
print(arr)
​
print(type(arr))
[1 2 3 4 5]
<class 'numpy.ndarray'>

import numpy as np
#Use a tuple to create a NumPy array:
​
arr = np.array((1, 2, 3, 4, 5))
​
print(arr)
[1 2 3 4 5]
#Create a 0-D array with value 42
​
import numpy as np
​
arr = np.array(42)
​
print(arr)
42
#Create a 1-D array containing the values 1,2,3,4,5:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4, 5])
​
print(arr)
[1 2 3 4 5]
#Create a 2-D array containing two arrays with the values 1,2,3 and 4,5,6:
​
import numpy as np
​
arr = np.array([[1, 2, 3], [4, 5, 6]])
​
print(arr)
[[1 2 3]
 [4 5 6]]
#Create a 3-D array with two 2-D arrays, both containing two arrays with the values 1,2,3 and 4,5,6:
import numpy as np
​
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])
​
print(arr)
​
[[[1 2 3]
  [4 5 6]]

 [[1 2 3]
  [4 5 6]]]
#Check how many dimensions the arrays have:
​
import numpy as np
​
a = np.array(42)
b = np.array([1, 2, 3, 4, 5])
c = np.array([[1, 2, 3], [4, 5, 6]])
d = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])
​
print(a.ndim)
print(b.ndim)
print(c.ndim)
print(d.ndim)
0
1
2
3
#Create an array with 5 dimensions and verify that it has 5 dimensions:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4], ndmin=5)
​
print(arr)
print('number of dimensions :', arr.ndim)
[[[[[1 2 3 4]]]]]
number of dimensions : 5
#Get the first element from the following array:
import numpy as np
​
arr = np.array([1, 2, 3, 4])
​
print(arr[0])
1
#Get the second element from the following array.
import numpy as np
​
arr = np.array([1, 2, 3, 4])
​
print(arr[1])
2
#Access the 2nd element on 1st dim:
​
import numpy as np
​
arr = np.array([[1,2,3,4,5], [6,7,8,9,10]])
​
print('2nd element on 1st dim: ', arr[0, 1])
​
2nd element on 1st dim:  2
#Access the third element of the second array of the first array:
​
import numpy as np
​
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
​
print(arr[0, 1, 2])
6
#Make a copy, change the original array, and display both arrays:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4, 5])
x = arr.copy()
arr[0] = 42
​
print(arr)
print(x)
[42  2  3  4  5]
[1 2 3 4 5]
#Make a view, change the original array, and display both arrays:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4, 5])
x = arr.view()
arr[0] = 42
​
print(arr)
print(x)
​
[42  2  3  4  5]
[42  2  3  4  5]
#Print the value of the base attribute to check if an array owns it's data or not:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4, 5])
​
x = arr.copy()
y = arr.view()
​
print(x.base)
print(y.base)
None
[1 2 3 4 5]
#Print the shape of a 2-D array:
​
import numpy as np
​
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
​
print(arr.shape)
#The example above returns (2, 4), which means that the array has 2 dimensions, and each dimension has 4 elements.
(2, 4)
#Create an array with 5 dimensions using ndmin using a vector with values 1,2,3,4 and verify that last dimension has value 4:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4], ndmin=5)
​
print(arr)
print('shape of array :', arr.shape)
​
[[[[[1 2 3 4]]]]]
shape of array : (1, 1, 1, 1, 4)
#Convert the following 1-D array with 12 elements into a 2-D array.
​
#The outermost dimension will have 4 arrays, each with 3 elements:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
​
newarr = arr.reshape(4, 3)
​
print(newarr)
[[ 1  2  3]
 [ 4  5  6]
 [ 7  8  9]
 [10 11 12]]
#Convert the following 1-D array with 12 elements into a 3-D array.
​
#The outermost dimension will have 2 arrays that contains 3 arrays, each with 2 elements:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
​
newarr = arr.reshape(2, 3, 2)
​
print(newarr)
[[[ 1  2]
  [ 3  4]
  [ 5  6]]

 [[ 7  8]
  [ 9 10]
  [11 12]]]
#Iterate on the elements of the following 1-D array:
​
import numpy as np
​
arr = np.array([1, 2, 3])
​
for x in arr:
  print(x)
1
2
3
#Iterate on the elements of the following 2-D array:
​
import numpy as np
​
arr = np.array([[1, 2, 3], [4, 5, 6]])
​
for x in arr:
  print(x)
[1 2 3]
[4 5 6]
#Join two arrays
​
import numpy as np
​
arr1 = np.array([1, 2, 3])
​
arr2 = np.array([4, 5, 6])
​
arr = np.concatenate((arr1, arr2))
​
print(arr)
[1 2 3 4 5 6]
#Join two 2-D arrays along rows (axis=1):
​
import numpy as np
​
arr1 = np.array([[1, 2], [3, 4]])
​
arr2 = np.array([[5, 6], [7, 8]])
​
arr = np.concatenate((arr1, arr2), axis=1)
​
print(arr)
​
[[1 2 5 6]
 [3 4 7 8]]
#Joining arrays using stack function:
import numpy as np
​
arr1 = np.array([1, 2, 3])
​
arr2 = np.array([4, 5, 6])
​
arr = np.stack((arr1, arr2), axis=1)
​
print(arr)
[[1 4]
 [2 5]
 [3 6]]
#stackng along rows:
import numpy as np
​
arr1 = np.array([1, 2, 3])
​
arr2 = np.array([4, 5, 6])
​
arr = np.hstack((arr1, arr2))
​
print(arr)
[1 2 3 4 5 6]
#Split the array in 3 parts:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4, 5, 6])
​
newarr = np.array_split(arr, 3)
​
print(newarr)
[array([1, 2]), array([3, 4]), array([5, 6])]
#Find the indexes where the value is 4:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4, 5, 4, 4])
​
x = np.where(arr == 4)
​
print(x)
(array([3, 5, 6]),)
#Find the indexes where the values are even:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])
​
x = np.where(arr%2 == 0)
​
print(x)
​
(array([1, 3, 5, 7]),)
#Find the indexes where the value 7 should be inserted:
​
import numpy as np
​
arr = np.array([6, 7, 8, 9])
​
x = np.searchsorted(arr, 7)
​
print(x)
# Ans = 1
#Find the indexes where the value 7 should be inserted, starting from the right:
​
import numpy as np
​
arr = np.array([6, 7, 8, 9])
​
x = np.searchsorted(arr, 7, side='right')
​
print(x)
#Ans=2
#Create an array from the elements on index 0 and 2:
​
import numpy as np
​
arr = np.array([41, 42, 43, 44])
​
x = [True, False, True, False]
​
newarr = arr[x]
​
print(newarr)
#Ans=[41 43]
#Create a filter array that will return only values higher than 42:
​
import numpy as np
​
arr = np.array([41, 42, 43, 44])
​
# Create an empty list
filter_arr = []
​
# go through each element in arr
for element in arr:
  # if the element is higher than 42, set the value to True, otherwise False:
  if element > 42:
    filter_arr.append(True)
  else:
    filter_arr.append(False)
​
newarr = arr[filter_arr]
​
print(filter_arr)
print(newarr)
#[False, False, True, True]
#[43 44]
#Create a filter array that will return only even elements from the original array:
​
import numpy as np
​
arr = np.array([1, 2, 3, 4, 5, 6, 7])
​
filter_arr = arr % 2 == 0
​
newarr = arr[filter_arr]
​
print(filter_arr)
print(newarr)
#[False  True False  True False  True False]
#[2 4 6]
#Generate a random integer from 0 to 100:
​
from numpy import random
​
x = random.randint(100)
​
print(x)
#Ans=29
​
#Generate a 1-D array containing 5 random integers from 0 to 100:
​
from numpy import random
​
x=random.randint(100, size=(5))
​
print(x)
#Ans=[29 16 34 34 54]
#Generate a 2-D array with 3 rows, each row containing 5 random integers from 0 to 100:
​
from numpy import random
​
x = random.randint(100, size=(3, 5))
​
print(x)
#Ans=[[80 54 19 74 65] [26 60 69 34 25] [50 16 53 84 90]]
#Generate a 1-D array containing 5 random floats:
​
from numpy import random
​
x = random.rand(5)
​
print(x)
#Ans=[0.5806657 0.5814489 0.7634207 0.3128732 0.0665157]
#Generate a 2-D array with 3 rows, each row containing 5 random numbers:
​
from numpy import random
​
x = random.rand(3, 5)
​
print(x)
#Ans=[[0.03379952 0.78263517 0.9834899  0.47851523 0.02948659] [0.36284007 0.10740884 0.58485016 0.20708396 0.00969559] 0.88232193 0.86068608 0.75548749 0.61233486 0.06325663]]
#Return one of the values in an array:
​
from numpy import random
​
x = random.choice([3, 5, 7, 9])
​
print(x)
#Ans=7
​
#Generate a 2-D array that consists of the values in the array parameter (3, 5, 7, and 9):
​
from numpy import random
​
x = random.choice([3, 5, 7, 9], size=(3, 5))
​
print(x)
#Ans=[[9 3 5 5 7] [7 5 3 3 9]  [7 5 9 9 7]]
#Generate a 1-D array containing 100 values, where each value has to be 3, 5, 7 or 9. with 0.1,0.3,0.6,0.0 probability values.
from numpy import random
​
x = random.choice([3, 5, 7, 9], p=[0.1, 0.3, 0.6, 0.0], size=(100))
​
print(x)
#Ans=[7 7 7 7 7 7 5 3 5 5 7 7 7 7 5 5 7 7 3 7 5 5 7 7 5 7 7 7 5 7 5 5 3 7 7 7 73 7 7 7 7 5 7 7 5 5 5 7 7 7 7 7 5 5 5 7 7 7 7 5 7 5 5 5 7 5 5 5 7 7 7 5 75 5 3 5 7 3 7 7 5 5 5 7 7 7 7 7 7 7 7 7 7 7 7 5 7 7]
#Same example as above, but return a 2-D array with 3 rows, each containing 5 values.
​
from numpy import random
​
x = random.choice([3, 5, 7, 9], p=[0.1, 0.3, 0.6, 0.0], size=(3, 5))
​
print(x)
​
[[3 5 7 7 5]
 [5 7 5 3 7]
 [7 7 7 7 7]]
#Return an iterator from a tuple, and print each value:
​
mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)
​
print(next(myit))
print(next(myit))
print(next(myit))
apple
banana
cherry
#Add a placeholder where you want to display the price:
​
price = 49
txt = "The price is {} dollars"
print(txt.format(price))
The price is 49 dollars
#Format the price to be displayed as a number with two decimals:
​
txt = "The price is {:.2f} dollars"
#Ans=49.00
#Also, if you want to refer to the same value more than once, use the index number:
age = 36
name = "John"
txt = "His name is {1}. {1} is {0} years old."
print(txt.format(age, name))
His name is John. John is 36 years old.
At about 50 Methods asked in Assignment_No:1